import numpy as np
import matplotlib.pyplot as plt
import scipy.constants
import pandas as pd
import time
import json

from functions.ib_functions import *
from functions.propellant import *
from functions.structural_functions import *
from functions.functions import *

# _____________________________________________________________________________________________________________________
# TIME FUNCTION START

start = time.time()

# _____________________________________________________________________________________________________________________
# INPUTS

# Motor name (NO SPACES):
name = 'SRM5K'
# Motor manufacturer (NO SPACES):
manufacturer = 'LCP'
# Motor structural mass [kg]:
m_motor = 15

# SIMULATION PARAMETERS INPUT
# Web regression resolution:
web_res = 1000
# .eng file resolution:
eng_res = 25
# Time step [s]:
dt = 1e-3
# Minimal safety factor:
sf = 4

# BATES PROPELLANT INPUT
# Grain count:
N = 7
# Grain external diameter [m]:
D_grain = 114e-3
# Grains 1 to 'N' core diameter [m]:
D_core = np.array([45, 45, 45, 45, 60, 60, 60]) * 1e-3
# Grains 1 to 'N' length [m]:
L_grain = np.array([200, 200, 200, 200, 200, 200, 200]) * 1e-3
# Grain spacing (used to determine chamber length) [m]:
grain_spacing = 10e-3

# PROPELLANT CHARACTERISTICS INPUT
# Propellant name:
prop = 'knsb-nakka'

# THRUST CHAMBER
# Casing inside diameter [m]:
D_in = 127e-3
# Chamber outside diameter [m]:
D_out = 139.7e-3
# Liner thickness [m]
liner_thickness = 3e-3
# Throat diameter [m]:
D_throat = 36e-3
# Nozzle divergent and convergent angle [degrees]:
Div_angle, Conv_angle = 12, 30
# Nozzle materials heat properties 1 and 2 (page 87 of a015140):
C1 = 0.00506
C2 = 0.00000

# EXTERNAL CONDITIONS
# External temperature [K]:
T_external = 297
# External pressure [Pa]:
P_external = 0.101325e6
# Igniter pressure [Pa]:
P_igniter = 1.5e6

# MECHANICAL DATA
# Chamber yield strength [Pa]:
Y_chamber = 240e6
# Bulkhead yield strength [Pa]:
Y_bulkhead = 255e6
# Nozzle material yield strength [Pa]:
Y_nozzle = 215e6

# FASTENER DATA
# Screw diameter (excluding threads) [m]:
D_screw = 6.75e-3
# Screw clearance hole diameter [m]:
D_clearance = 8.5e-3
# Tensile strength of the screw [Pa]:
U_screw = 510e6
# Maximum number of fasteners:
max_number_of_screws = 30

# _____________________________________________________________________________________________________________________
# PRE CALCULATIONS AND DEFINITIONS

# The prop name input above triggers the function inside 'Propellant.py' to return the required data.
ce, pp, k_mix_ch, k_2ph_ex, T0_ideal, M_ch, M_ex, Isp_frozen, Isp_shifting, qsi_ch, qsi_ex = prop_data(prop)
# Getting PropellantSelected class based on previous input:
propellant = PropellantSelected(
    ce, pp, k_mix_ch, k_2ph_ex, T0_ideal, M_ch, M_ex, Isp_frozen, Isp_shifting, qsi_ch, qsi_ex
)
# Combustion chamber length [m]:
L_chamber = np.sum(L_grain) + (N - 1) * grain_spacing
# Combustion chamber inner diameter (casing inner diameter minus liner thickness) [m]:
D_chamber = D_in - 2 * liner_thickness
# Defining 'grain' as an instance of BATES:
grain = BATES(web_res, N, D_grain, D_core, L_grain)
# Defining 'structure' as an instance of the MotorStructure class:
structure = MotorStructure(
    sf, m_motor, D_in, D_out, D_chamber, L_chamber, D_screw, D_clearance, D_throat, get_circle_area(D_throat), C1, C2,
    Div_angle
)

# _____________________________________________________________________________________________________________________
# INTERNAL BALLISTICS

ib_parameters = run_internal_ballistics(propellant, grain, structure, web_res, P_igniter, P_external, dt, prop)

# _____________________________________________________________________________________________________________________
# MOTOR STRUCTURE

# Casing thickness assuming thin wall [m]:
casing_sf = structure.casing_safety_factor(Y_chamber, ib_parameters.P0)

# Nozzle thickness assuming thin wall [m]:
nozzle_conv_t, nozzle_div_t, = structure.nozzle_thickness(
    Y_nozzle, Div_angle, Conv_angle, ib_parameters.P0)

# Bulkhead thickness [m]:
bulkhead_t = structure.bulkhead_thickness(Y_bulkhead, ib_parameters.P0)

# Screw safety factors and optimal quantity (shear, tear and compression):
optimal_fasteners, max_sf_fastener, shear_sf, tear_sf, compression_sf = \
    structure.optimal_fasteners(max_number_of_screws, ib_parameters.P0, Y_chamber, U_screw)

# _____________________________________________________________________________________________________________________
# RESULTS

print('\nResults generated by SRM Solver program, by Felipe Bogaerts de Mattos')

print('\nBURN REGRESSION')
if ib_parameters.m_prop[0] > 1:
    print(f' Propellant initial mass {ib_parameters.m_prop[0]:.3f} kg')
else:
    print(f' Propellant initial mass {ib_parameters.m_prop[0] * 1e3:.3f} g')
print(' Mean Kn: %.2f' % np.mean(ib_parameters.Kn))
print(f' Initial to final Kn ratio: {ib_parameters.initial_to_final_kn:.3f}')
print(f' Volumetric efficiency: {(ib_parameters.V_prop[0] * 100 / ib_parameters.V_empty):.3f} %')
print(f' Grain length for neutral profile vector: {ib_parameters.optimal_grain_length}')

print(' Burn profile: ' + ib_parameters.burn_profile)
print(f' Initial port-to-throat (grain #{N:d}): {ib_parameters.initial_port_to_throat:.3f}')
print(' Motor L/D ratio: %.3f' % (np.sum(L_grain) / D_grain))
print(f' Max initial mass flux: {np.max(ib_parameters.grain_mass_flux):.3f} kg/s-m-m or '
      f'{np.max(ib_parameters.grain_mass_flux) * 1.42233e-3:.3f} lb/s-in-in')

print('\nCHAMBER PRESSURE')
print(f' Maximum, average chamber pressure: {(np.max(ib_parameters.P0) * 1e-6):.3f}, '
      f'{(np.mean(ib_parameters.P0) * 1e-6):.3f} MPa')

print('\nTHRUST AND IMPULSE')
print(f' Maximum, average thrust: {np.max(ib_parameters.F):.3f}, {np.mean(ib_parameters.F):.3f} N')
print(f' Total, specific impulses: {ib_parameters.I_total:.3f} N-s, {ib_parameters.I_sp:.3f} s')
print(f' Burnout time, thrust time: {ib_parameters.t_burnout:.3f}, {ib_parameters.t[-1]:.3f} s')

print('\nNOZZLE DESIGN')
print(f' Average opt. exp. ratio: {np.mean(ib_parameters.E):.3f}')
print(f' Nozzle exit diameter: {D_throat * np.sqrt(np.mean(ib_parameters.E)) * 1e3:.3f} mm')
print(f' Average nozzle efficiency: {np.mean(ib_parameters.n_cf) * 100:.3f} %')

print('\nPRELIMINARY STRUCTURAL PROJECT')
print(f' Casing safety factor: {casing_sf:.2f}')
print(f' Minimal nozzle convergent, divergent thickness: {nozzle_conv_t * 1e3:.3f}, '
      f'{nozzle_div_t * 1e3:.3f} mm')
print(f' Minimal bulkhead thickness: {bulkhead_t * 1e3:.3f} mm')
print(f' Optimal number of screws: {optimal_fasteners + 1:d}')
print(f' Shear, tear, compression screw safety factors: {shear_sf[optimal_fasteners]:.3f}, '
      f'{tear_sf[optimal_fasteners]:.3f}, {compression_sf[optimal_fasteners]:.3f}')
print('\nDISCLAIMER: values above shall not be the final dimensions.')
print('Critical dimensions shall be investigated in depth in order to guarantee safety.')

print('\n')

# _____________________________________________________________________________________________________________________
# OUTPUT TO ENG AND CSV FILE
# This program exports the motor data into three separate files.
# The .eng file is compatible with most rocket ballistic simulators such as openRocket and RASAero.
# The output .csv file contains thrust, time, prop mass, Kn, chamber pressure, web thickness and burn rate data.
# The input .csv file contains all info used in the input section.

# Writing the ENG file:
motor_to_eng(ib_parameters.t, ib_parameters.F, dt, ib_parameters.V_prop, D_out, L_chamber, eng_res,
             pp, ib_parameters.m_prop, m_motor, manufacturer, name)

# Writing to output CSV file:
motor_data = {'Time': ib_parameters.t, 'Thrust': ib_parameters.F, 'Prop_Mass': ib_parameters.m_prop}
motor_data_df = pd.DataFrame(motor_data)
motor_data_df.to_csv(f'output/{name}.csv', decimal='.')

# _____________________________________________________________________________________________________________________
# TIME FUNCTION END

print('Execution time: %.4f seconds\n\n' % (time.time() - start))

# _____________________________________________________________________________________________________________________
# PLOTS

# performance_figure = performance_plot(F, P0, t)
# main_figure = main_plot(t, F, P0, Kn, m_prop)
# mass_flux_figure = mass_flux_plot(t, grain_mass_flux)
